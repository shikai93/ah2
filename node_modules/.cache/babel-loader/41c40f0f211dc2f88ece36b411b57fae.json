{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shikai.ng\\\\Desktop\\\\ah2\\\\src\\\\Components\\\\PDFExportForm\\\\SpeechToTextRecognizer.js\";\nimport React from 'react';\nimport SpeechRecognition from \"react-speech-recognition\";\n\nclass SpeechRecognizer extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.recordIdHandling = undefined;\n    this.fieldHandling = undefined;\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    let id = this.recordIdHandling;\n    let field = this.fieldHandling;\n    let val = nextProps.transcript;\n    console.log(field, val);\n\n    if (field === undefined || val === \"\" || val === this.props.transcript) {\n      return;\n    }\n\n    if (this.props.onSpeechRecognized instanceof Function) {\n      this.props.onSpeechRecognized(id, field, val);\n    }\n  }\n\n  handleRecordFocus(event) {\n    this.fieldHandling = event.target.dataset.datafield;\n    this.recordIdHandling = event.target.dataset.id;\n    this.props.startListening();\n  }\n\n  handleRecordBlur(event) {\n    this.fieldHandling = undefined;\n    this.props.stopListening();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30\n      },\n      __self: this\n    }, React.cloneElement(this.props.children, {\n      onFocus: this.handleRecordFocus.bind(this),\n      onBlur: this.handleRecordBlur.bind(this)\n    }));\n  }\n\n}\n\nconst options = {\n  autoStart: false,\n  continuous: false\n};\nexport default SpeechRecognition(options)(SpeechRecognizer);","map":{"version":3,"sources":["C:/Users/shikai.ng/Desktop/ah2/src/Components/PDFExportForm/SpeechToTextRecognizer.js"],"names":["React","SpeechRecognition","SpeechRecognizer","Component","recordIdHandling","undefined","fieldHandling","UNSAFE_componentWillReceiveProps","nextProps","id","field","val","transcript","console","log","props","onSpeechRecognized","Function","handleRecordFocus","event","target","dataset","datafield","startListening","handleRecordBlur","stopListening","render","cloneElement","children","onFocus","bind","onBlur","options","autoStart","continuous"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,iBAAP,MAA8B,0BAA9B;;AAEA,MAAMC,gBAAN,SAA+BF,KAAK,CAACG,SAArC,CAA+C;AAAA;AAAA;AAAA,SAC3CC,gBAD2C,GACxBC,SADwB;AAAA,SAE3CC,aAF2C,GAE3BD,SAF2B;AAAA;;AAG3CE,EAAAA,gCAAgC,CAACC,SAAD,EAAY;AACxC,QAAIC,EAAE,GAAG,KAAKL,gBAAd;AACA,QAAIM,KAAK,GAAG,KAAKJ,aAAjB;AACA,QAAIK,GAAG,GAAGH,SAAS,CAACI,UAApB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ,EAAmBC,GAAnB;;AACA,QAAID,KAAK,KAAKL,SAAV,IAAuBM,GAAG,KAAK,EAA/B,IAAqCA,GAAG,KAAK,KAAKI,KAAL,CAAWH,UAA5D,EAAwE;AACpE;AACH;;AACD,QAAK,KAAKG,KAAL,CAAWC,kBAAX,YAAyCC,QAA9C,EAAwD;AACpD,WAAKF,KAAL,CAAWC,kBAAX,CAA8BP,EAA9B,EAAkCC,KAAlC,EAAyCC,GAAzC;AACH;AACJ;;AACDO,EAAAA,iBAAiB,CAACC,KAAD,EAAQ;AACrB,SAAKb,aAAL,GAAqBa,KAAK,CAACC,MAAN,CAAaC,OAAb,CAAqBC,SAA1C;AACA,SAAKlB,gBAAL,GAAwBe,KAAK,CAACC,MAAN,CAAaC,OAAb,CAAqBZ,EAA7C;AACA,SAAKM,KAAL,CAAWQ,cAAX;AACH;;AACDC,EAAAA,gBAAgB,CAACL,KAAD,EAAQ;AACpB,SAAKb,aAAL,GAAqBD,SAArB;AACA,SAAKU,KAAL,CAAWU,aAAX;AACH;;AACDC,EAAAA,MAAM,GAAG;AACL,WACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACC1B,KAAK,CAAC2B,YAAN,CAAmB,KAAKZ,KAAL,CAAWa,QAA9B,EAAwC;AACrCC,MAAAA,OAAO,EAAG,KAAKX,iBAAL,CAAuBY,IAAvB,CAA4B,IAA5B,CAD2B;AAErCC,MAAAA,MAAM,EAAG,KAAKP,gBAAL,CAAsBM,IAAtB,CAA2B,IAA3B;AAF4B,KAAxC,CADD,CADJ;AAOH;;AAhC0C;;AAkC/C,MAAME,OAAO,GAAG;AACZC,EAAAA,SAAS,EAAE,KADC;AAEZC,EAAAA,UAAU,EAAG;AAFD,CAAhB;AAIA,eAAejC,iBAAiB,CAAE+B,OAAF,CAAjB,CAA6B9B,gBAA7B,CAAf","sourcesContent":["import React from 'react';\r\nimport SpeechRecognition from \"react-speech-recognition\";\r\n\r\nclass SpeechRecognizer extends React.Component { \r\n    recordIdHandling = undefined\r\n    fieldHandling = undefined\r\n    UNSAFE_componentWillReceiveProps(nextProps) {\r\n        let id = this.recordIdHandling;\r\n        let field = this.fieldHandling;\r\n        let val = nextProps.transcript;\r\n        console.log(field, val)\r\n        if (field === undefined || val === \"\" || val === this.props.transcript) {\r\n            return\r\n        }\r\n        if ( this.props.onSpeechRecognized instanceof Function) {\r\n            this.props.onSpeechRecognized(id, field, val)\r\n        }\r\n    }\r\n    handleRecordFocus(event) {\r\n        this.fieldHandling = event.target.dataset.datafield\r\n        this.recordIdHandling = event.target.dataset.id\r\n        this.props.startListening();\r\n    }\r\n    handleRecordBlur(event) {\r\n        this.fieldHandling = undefined\r\n        this.props.stopListening();\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n            {React.cloneElement(this.props.children, { \r\n                onFocus : this.handleRecordFocus.bind(this),\r\n                onBlur : this.handleRecordBlur.bind(this)})}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst options = {\r\n    autoStart: false,\r\n    continuous : false\r\n}\r\nexport default SpeechRecognition (options) (SpeechRecognizer);"]},"metadata":{},"sourceType":"module"}