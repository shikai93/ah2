{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\shikai.ng\\\\Desktop\\\\ah2\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\shikai.ng\\\\Desktop\\\\ah2\\\\src\\\\Helpers\\\\auth\\\\auth.js\";\nimport React, { useState, useEffect } from \"react\";\nconst AuthContext = React.createContext();\n\nfunction AuthProvider(props) {\n  const _useState = useState({}),\n        _useState2 = _slicedToArray(_useState, 2),\n        isAuthenticated = _useState2[0],\n        setAuthenticated = _useState2[1]; // useState React hook\n\n\n  useEffect(() => {\n    setAuthenticated(localStorage.getItem(\"isAuthenticated\") == \"true\");\n    console.log(isAuthenticated);\n  }, [setAuthenticated, isAuthenticated]);\n  return React.createElement(AuthContext.Provider, Object.assign({\n    value: {\n      isAuthenticated,\n      setAuthenticated\n    }\n  }, props, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }), props.children);\n}\n\nfunction authenticate(username, password, authManager, redirectPath) {\n  if (username === 'test' && password === 'test') {\n    authManager.setAuthenticated(true);\n    localStorage.setItem(\"isAuthenticated\", true);\n\n    if (redirectPath === undefined) {\n      this.props.history.push('/');\n    } else {\n      this.props.history.push(redirectPath);\n    }\n  } else {\n    authManager.setAuthenticated(false);\n    localStorage.setItem(\"isAuthenticated\", false);\n  }\n}\n\nconst useAuth = () => React.useContext(AuthContext);\n\nexport { AuthProvider, useAuth, AuthContext, authenticate };","map":{"version":3,"sources":["C:/Users/shikai.ng/Desktop/ah2/src/Helpers/auth/auth.js"],"names":["React","useState","useEffect","AuthContext","createContext","AuthProvider","props","isAuthenticated","setAuthenticated","localStorage","getItem","console","log","children","authenticate","username","password","authManager","redirectPath","setItem","undefined","history","push","useAuth","useContext"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,MAAMC,WAAW,GAAGH,KAAK,CAACI,aAAN,EAApB;;AACA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAAA,oBACmBL,QAAQ,CAAC,EAAD,CAD3B;AAAA;AAAA,QAClBM,eADkB;AAAA,QACDC,gBADC,kBAGzB;;;AACAN,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,gBAAgB,CAACC,YAAY,CAACC,OAAb,CAAqB,iBAArB,KAA2C,MAA5C,CAAhB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,eAAZ;AACH,GAHQ,EAGN,CAACC,gBAAD,EAAkBD,eAAlB,CAHM,CAAT;AAIA,SACI,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAACA,MAAAA,eAAD;AAAkBC,MAAAA;AAAlB;AAA7B,KAAsEF,KAAtE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MACKA,KAAK,CAACO,QADX,CADJ;AAKH;;AACD,SAASC,YAAT,CAAsBC,QAAtB,EAAgCC,QAAhC,EAA0CC,WAA1C,EAAuDC,YAAvD,EAAqE;AACjE,MAAIH,QAAQ,KAAK,MAAb,IAAuBC,QAAQ,KAAK,MAAxC,EAAgD;AAC5CC,IAAAA,WAAW,CAACT,gBAAZ,CAA6B,IAA7B;AACAC,IAAAA,YAAY,CAACU,OAAb,CAAqB,iBAArB,EAAuC,IAAvC;;AACA,QAAID,YAAY,KAAKE,SAArB,EAAgC;AAC5B,WAAKd,KAAL,CAAWe,OAAX,CAAmBC,IAAnB,CAAwB,GAAxB;AACH,KAFD,MAEO;AACH,WAAKhB,KAAL,CAAWe,OAAX,CAAmBC,IAAnB,CAAwBJ,YAAxB;AACH;AACJ,GARD,MAQO;AACHD,IAAAA,WAAW,CAACT,gBAAZ,CAA6B,KAA7B;AACAC,IAAAA,YAAY,CAACU,OAAb,CAAqB,iBAArB,EAAuC,KAAvC;AACH;AACJ;;AACD,MAAMI,OAAO,GAAG,MAAMvB,KAAK,CAACwB,UAAN,CAAiBrB,WAAjB,CAAtB;;AACA,SAAQE,YAAR,EAAsBkB,OAAtB,EAA+BpB,WAA/B,EAA4CW,YAA5C","sourcesContent":["import React, { useState, useEffect } from \"react\"\r\nconst AuthContext = React.createContext()\r\nfunction AuthProvider(props) {\r\n    const [isAuthenticated, setAuthenticated] = useState({});\r\n\r\n    // useState React hook\r\n    useEffect(() => { \r\n        setAuthenticated(localStorage.getItem(\"isAuthenticated\") == \"true\")\r\n        console.log(isAuthenticated)\r\n    }, [setAuthenticated,isAuthenticated])\r\n    return (\r\n        <AuthContext.Provider value={{isAuthenticated, setAuthenticated}} {...props} >\r\n            {props.children}\r\n        </AuthContext.Provider>\r\n    )\r\n}\r\nfunction authenticate(username, password, authManager, redirectPath) {\r\n    if (username === 'test' && password === 'test') {\r\n        authManager.setAuthenticated(true)\r\n        localStorage.setItem(\"isAuthenticated\",true)\r\n        if (redirectPath === undefined) {\r\n            this.props.history.push('/')\r\n        } else {\r\n            this.props.history.push(redirectPath)\r\n        }\r\n    } else {\r\n        authManager.setAuthenticated(false)\r\n        localStorage.setItem(\"isAuthenticated\",false)\r\n    }\r\n}\r\nconst useAuth = () => React.useContext(AuthContext)\r\nexport {AuthProvider, useAuth, AuthContext, authenticate}"]},"metadata":{},"sourceType":"module"}